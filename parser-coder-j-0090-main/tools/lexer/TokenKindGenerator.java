package tools.lexer;

import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;

import exceptions.CompilerToolException;
import tools.FileGeneratorTool;
import tools.configuration.LexerConfiguration;

public class TokenKindGenerator extends FileGeneratorTool {

  public static final String GENERATED_CLASS_NAME = "TokenKind";

  public TokenKindGenerator(Path specificationFile) throws CompilerToolException {
    super(specificationFile);
  }

  private String packageLine() {
    return this.formatLine(
        String.format(
            "package %s.%s;",
            LexerConfiguration.LEXER_PACKAGE,
            LexerConfiguration.DAO_PACKAGE),
        0, 2);
  }

  @Override
  public void generate() throws CompilerToolException {
    try (FileWriter writer = new FileWriter(this.getGeneratedFilePath().toFile())) {

      writer.write(this.packageLine());

      writer.write(this.getAutoGeneratedWarning());
      writer.write(
          this.formatLine(String.format("public enum %s {", GENERATED_CLASS_NAME), 0, 1));

      writer.write(
          this.formatLine(String.format("// Special %s for internal use", GENERATED_CLASS_NAME), 1, 1));
      writer.write(
          this.formatLine("BogusToken,", 1, 2));

      writer.write(
          this.formatLine(String.format("// Generated %ss", GENERATED_CLASS_NAME), 1));

      int count = 0;
      boolean isNewLine = false;

      while (this.hasNext()) {
        isNewLine = count++ % 5 == 0;
        String[] lineParts = this.next().split("\\s+");

        if (isNewLine) {
          writer.write(System.lineSeparator());
          writer.write(this.formatLine(
              String.format("%s,", lineParts[0]), 1));
        } else {
          writer.write(String.format(" %s,", lineParts[0]));
        }

        isNewLine = false;
      }

      writer.write(this.formatLine("", 0, 2));
      writer.write(
          this.formatLine(String.format("// Special %s for internal use", GENERATED_CLASS_NAME), 1, 1));
      writer.write(
          this.formatLine("EOF", 1, 1));

      writer.write(this.formatLine("}", 0, 1));

    } catch (IOException ioe) {
      throw new CompilerToolException(
          String.format("Unable to create the %s enumeration", GENERATED_CLASS_NAME));
    }
  }

  @Override
  public Path getGeneratedFilePath() {
    return Paths.get(
        LexerConfiguration.LEXER_PACKAGE,
        LexerConfiguration.DAO_PACKAGE,
        String.format("%s.java", GENERATED_CLASS_NAME));
  }

}
